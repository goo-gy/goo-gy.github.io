{"version":3,"sources":["webpack:///./node_modules/@nehalist/gatsby-theme-nehalem/src/components/subheader/index.tsx","webpack:///./node_modules/@nehalist/gatsby-theme-nehalem/src/components/post-grid/index.tsx","webpack:///./node_modules/@nehalist/gatsby-theme-nehalem/src/templates/tag.tsx","webpack:///./node_modules/@nehalist/gatsby-theme-nehalem/src/components/card/style.tsx","webpack:///./node_modules/@nehalist/gatsby-theme-nehalem/src/components/card/index.tsx"],"names":["StyledSubheader","styled","div","props","backgroundColor","textColor","SubheaderTitle","h1","SubheaderSubtitle","small","Subheader","title","subtitle","PostGrid","posts","map","post","index","frontmatter","path","featuredImage","childImageSharp","content","excerpt","key","meta","time","created","timePretty","createdPretty","tag","tags","length","TagTemplate","data","location","edges","node","name","color","Theme","layout","primaryColor","icon","featured","bigHeader","type","StyledCard","Link","StyledArticle","article","breakpoints","sm","FeaturedImage","Img","halfImage","CardContent","section","compact","CardMeta","CardTitle","h2","Card","style","children","to","fixed","sizes","dateTime","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"component---node-modules-nehalist-gatsby-theme-nehalem-src-templates-tag-tsx-c2071567154139543e29.js","sourcesContent":["import React, {FunctionComponent} from \"react\";\nimport styled from \"styled-components\";\nimport {Container} from \"../common\";\n\ninterface SubheaderProps {\n  title: string;\n  subtitle?: string;\n  backgroundColor?: string;\n  textColor?: string;\n}\n\nconst StyledSubheader = styled.div<Pick<SubheaderProps, 'backgroundColor' | 'textColor'>>`\n  background-color: ${props => props.backgroundColor ? props.backgroundColor : '#000'};\n  color: ${props => props.textColor ? props.textColor : '#fff'};\n  display: flex;\n  align-items: center;\n  height: 90px;\n  margin-bottom: 30px;\n`;\n\nconst SubheaderTitle = styled.h1`\n  font-size: 1.2em;\n  font-weight: bold;\n  color: #fff;\n  margin: 0;\n  line-height: 1em;\n`;\n\nconst SubheaderSubtitle = styled.small`\n  font-weight: normal;\n  display: block;\n  opacity: .9;\n`;\n\nconst Subheader: FunctionComponent<SubheaderProps> = ({title, subtitle, backgroundColor, textColor}) => (\n  <StyledSubheader backgroundColor={backgroundColor} textColor={textColor}>\n    <Container>\n      <SubheaderTitle>\n        {title}\n        <SubheaderSubtitle>{subtitle}</SubheaderSubtitle>\n      </SubheaderTitle>\n    </Container>\n  </StyledSubheader>\n);\n\nexport default Subheader;\n","import React, {FunctionComponent} from \"react\";\nimport {Post} from \"../../utils/models\";\nimport {Grid} from \"../common\";\nimport {Card} from \"../card\";\n\ninterface PostGridProps {\n  posts: Post[];\n}\n\nconst PostGrid: FunctionComponent<PostGridProps> = ({posts}) => (\n  <Grid>\n    {posts.map((post, index) => (\n      <Card\n        title={post.frontmatter.title}\n        path={post.frontmatter.path}\n        featuredImage={post.frontmatter.featuredImage ? post.frontmatter.featuredImage.childImageSharp : null}\n        content={post.frontmatter.excerpt}\n        key={index}\n        meta={\n          {\n            time: post.frontmatter.created,\n            timePretty: post.frontmatter.createdPretty,\n            tag: post.frontmatter.tags.length > 0 ? post.frontmatter.tags[0] : null,\n          }\n        }\n      />\n    ))}\n  </Grid>\n);\n\nexport default PostGrid;\n","import React, {FunctionComponent} from \"react\";\nimport Layout from \"../components/layout\";\nimport {graphql} from \"gatsby\";\nimport {Post, Tag} from \"../utils/models\";\nimport Subheader from \"../components/subheader\";\nimport SEO from \"../components/seo\";\nimport Theme from \"../styles/theme\";\nimport PostGrid from \"../components/post-grid\";\n\ninterface TagTemplateProps {\n  data: {\n    tag: Tag;\n    posts: {\n      edges: Array<{ node: Post }>;\n    }\n  };\n  location: Location;\n}\n\nconst TagTemplate: FunctionComponent<TagTemplateProps> = ({data, location}) => {\n  let tag     = data.tag;\n  const posts = data.posts.edges.map(node => node.node);\n\n  if (! tag && posts.length > 0) {\n    tag = {\n      name: posts[0].frontmatter.tags[0],\n      color: Theme.layout.primaryColor,\n      icon: null,\n      featured: false,\n    };\n  }\n\n  return (\n    <Layout bigHeader={false}>\n      <SEO\n        title={tag.name}\n        location={location}\n        type={`Series`}\n      />\n      <Subheader title={tag.name} subtitle={`${posts.length} posts`} backgroundColor={tag.color}/>\n      <PostGrid posts={posts} />\n    </Layout>\n  );\n};\n\nexport default TagTemplate;\n\nexport const query = graphql`\n  query($tag: String!) {\n    tag: tags(name: { eq: $tag }) {\n      name\n      color\n    }\n    posts: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: {regex: \"/(posts)/.*\\\\\\\\.md$/\"},\n        frontmatter: {tags: {eq: $tag}}\n      },\n      sort: {fields: frontmatter___created, order: DESC}\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            path\n            tags\n            excerpt\n            created\n            createdPretty: created(formatString: \"DD MMMM, YYYY\")\n            featuredImage {\n              childImageSharp {\n                sizes(maxWidth: 800, quality: 100) {\n                  base64\n                  aspectRatio\n                  src\n                  srcSet\n                  sizes\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import styled from \"styled-components\";\nimport {Link} from \"gatsby\";\nimport Theme from \"../../styles/theme\";\nimport Img from \"gatsby-image\";\nimport {CardProps} from \"./index\";\n\nexport const StyledCard = styled(Link)`\n  display: block;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0 1px 1px #e6e6e6, 0 2px 4px #e6e6e6;\n  transition: .5s all;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  &:hover {\n    transform: translate3d(0, -5px, 0);\n    box-shadow: 0 1px 1px #ccc, 0 4px 4px #ccc;\n  }\n`;\n\nexport const StyledArticle = styled.article`\n  display: inline-block;\n  width: 100%;\n\n  @media (max-width: ${Theme.breakpoints.sm}) {\n    grid-area: unset !important;\n  }\n`;\n\nexport const FeaturedImage = styled(Img)<Pick<CardProps, 'halfImage'>>`\n  background-position: center;\n  background-size: cover;\n  max-width: 100%;\n  border-top-left-radius: 3px;\n\n  ${props => props.halfImage ? `\n    width: 50%;\n    float: left;\n    margin-right: 30px;\n    height: 320px;\n    border-bottom-left-radius: 3px;\n\n    @media (max-width: ${Theme.breakpoints.sm}) {\n      width: 100%;\n      float: none;\n      height: 190px;\n    }\n  ` : `\n    height: 190px;\n    max-height: 190px;\n    width: 100%;\n    border-top-right-radius: 3px;\n  `};\n`;\n\nexport const CardContent = styled.section<{ compact: boolean }>`\n  padding: ${props => props.compact ? '10px' : '40px'};\n\n  p {\n    margin: 15px 0;\n  }\n\n  h2 {\n    font-size: 1.2em;\n  }\n`;\n\nexport const CardMeta = styled.section`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 8px;\n  font-size: .8em;\n  opacity: .8;\n  line-height: 1em;\n`;\n\nexport const CardTitle = styled.h2`\n  margin: 0;\n  padding: 0;\n`;\n","import React, {CSSProperties, FunctionComponent, ReactNode} from \"react\";\nimport {CardContent, CardMeta, CardTitle, FeaturedImage, StyledArticle, StyledCard} from \"./style\";\n\nexport interface CardProps {\n  title?: string;\n  path: string;\n  featuredImage?: any;\n  content?: string;\n  meta?: {\n    time: string;\n    timePretty: string;\n    tag: string | null;\n  };\n  halfImage?: boolean;\n  compact?: boolean;\n  style?: CSSProperties;\n  children?: ReactNode;\n}\n\nexport const Card: FunctionComponent<CardProps> = ({\n                                                     title,\n                                                     meta,\n                                                     path,\n                                                     featuredImage,\n                                                     content,\n                                                     halfImage = false,\n                                                     compact = false,\n                                                     style,\n                                                     children,\n                                                   }) => (\n  <StyledArticle style={style}>\n    <StyledCard to={path}>\n      {/* TODO: Oh boy... */}\n      {(featuredImage && featuredImage.fixed) &&\n      <FeaturedImage fixed={featuredImage.fixed} halfImage={halfImage}/>\n      }\n      {(featuredImage && featuredImage.sizes) &&\n      <FeaturedImage sizes={featuredImage.sizes} halfImage={halfImage}/>\n      }\n      <CardContent compact={compact}>\n        {children}\n        <header>\n          {meta &&\n          <CardMeta>\n            {meta.tag && <>{meta.tag}</>}\n            {meta.time &&\n            <time dateTime={meta.time}>{meta.timePretty}</time>\n            }\n          </CardMeta>\n          }\n          {title &&\n          <CardTitle>{title}</CardTitle>\n          }\n        </header>\n        {content &&\n        <p dangerouslySetInnerHTML={{__html: content}}/>\n        }\n      </CardContent>\n    </StyledCard>\n  </StyledArticle>\n);\n"],"sourceRoot":""}